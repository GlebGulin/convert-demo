// <auto-generated />
using System;
using Binding;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Binding.Migrations
{
    [DbContext(typeof(ConvertContext))]
    partial class ConvertContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Models.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CurrencyName");

                    b.HasKey("Id");

                    b.ToTable("currencies");

                    b.HasData(
                        new { Id = 1, CurrencyName = "USD" },
                        new { Id = 2, CurrencyName = "EUR" },
                        new { Id = 3, CurrencyName = "GBP" },
                        new { Id = 4, CurrencyName = "CHF" }
                    );
                });

            modelBuilder.Entity("Models.Models.HistoryConvert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DateConvert");

                    b.Property<decimal>("FromAmount");

                    b.Property<int>("FromCurrencyId");

                    b.Property<decimal>("ToAmount");

                    b.Property<int>("ToCurrencyId");

                    b.HasKey("Id");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("histories");

                    b.HasData(
                        new { Id = 1, DateConvert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), FromAmount = 600m, FromCurrencyId = 1, ToAmount = 700m, ToCurrencyId = 2 },
                        new { Id = 2, DateConvert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), FromAmount = 500m, FromCurrencyId = 2, ToAmount = 800m, ToCurrencyId = 3 },
                        new { Id = 3, DateConvert = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), FromAmount = 200m, FromCurrencyId = 1, ToAmount = 800m, ToCurrencyId = 3 }
                    );
                });

            modelBuilder.Entity("Models.Models.HistoryConvert", b =>
                {
                    b.HasOne("Models.Models.Currency", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Models.Currency", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
